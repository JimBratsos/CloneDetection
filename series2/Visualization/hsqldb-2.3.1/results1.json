{
  "summary": {
    "project_name": "Project"
  },
  "clone_code_percentage": 0.4495175335,
  "biggest_class_members": 3,
  "clone_pairs": [
    {
      "origin": {
        "end_line": 367,
        "file": "/hsqldb/src/org/hsqldb/NumberSequence.java",
        "start_line": 340,
        "source_code": "case Types.TINYINT :\r\n                max = Byte.MAX_VALUE;\r\n                min = Byte.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_SMALLINT :\r\n                max = Short.MAX_VALUE;\r\n                min = Short.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_INTEGER :\r\n                max = Integer.MAX_VALUE;\r\n                min = Integer.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_BIGINT :\r\n                max = Long.MAX_VALUE;\r\n                min = Long.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_NUMERIC :\r\n            case Types.SQL_DECIMAL :\r\n                max = Long.MAX_VALUE;\r\n                min = Long.MIN_VALUE;\r\n                break;\r\n\r\n            default :\r\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
      },
      "id": "clone_1",
      "clone_type": "type-1",
      "clone": {
        "end_line": 497,
        "file": "/hsqldb/src/org/hsqldb/NumberSequence.java",
        "start_line": 470,
        "source_code": "case Types.TINYINT :\r\n                max = Byte.MAX_VALUE;\r\n                min = Byte.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_SMALLINT :\r\n                max = Short.MAX_VALUE;\r\n                min = Short.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_INTEGER :\r\n                max = Integer.MAX_VALUE;\r\n                min = Integer.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_BIGINT :\r\n                max = Long.MAX_VALUE;\r\n                min = Long.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_NUMERIC :\r\n            case Types.SQL_DECIMAL :\r\n                max = Long.MAX_VALUE;\r\n                min = Long.MIN_VALUE;\r\n                break;\r\n\r\n            default :\r\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
      }
    },
    {
      "origin": {
        "end_line": 367,
        "file": "/hsqldb/src/org/hsqldb/NumberSequence.java",
        "start_line": 340,
        "source_code": "case Types.TINYINT :\r\n                max = Byte.MAX_VALUE;\r\n                min = Byte.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_SMALLINT :\r\n                max = Short.MAX_VALUE;\r\n                min = Short.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_INTEGER :\r\n                max = Integer.MAX_VALUE;\r\n                min = Integer.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_BIGINT :\r\n                max = Long.MAX_VALUE;\r\n                min = Long.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_NUMERIC :\r\n            case Types.SQL_DECIMAL :\r\n                max = Long.MAX_VALUE;\r\n                min = Long.MIN_VALUE;\r\n                break;\r\n\r\n            default :\r\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
      },
      "id": "clone_2",
      "clone_type": "type-1",
      "clone": {
        "end_line": 538,
        "file": "/hsqldb/src/org/hsqldb/NumberSequence.java",
        "start_line": 511,
        "source_code": "case Types.TINYINT :\r\n                max = Byte.MAX_VALUE;\r\n                min = Byte.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_SMALLINT :\r\n                max = Short.MAX_VALUE;\r\n                min = Short.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_INTEGER :\r\n                max = Integer.MAX_VALUE;\r\n                min = Integer.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_BIGINT :\r\n                max = Long.MAX_VALUE;\r\n                min = Long.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_NUMERIC :\r\n            case Types.SQL_DECIMAL :\r\n                max = Long.MAX_VALUE;\r\n                min = Long.MIN_VALUE;\r\n                break;\r\n\r\n            default :\r\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
      }
    },
    {
      "origin": {
        "end_line": 497,
        "file": "/hsqldb/src/org/hsqldb/NumberSequence.java",
        "start_line": 470,
        "source_code": "case Types.TINYINT :\r\n                max = Byte.MAX_VALUE;\r\n                min = Byte.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_SMALLINT :\r\n                max = Short.MAX_VALUE;\r\n                min = Short.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_INTEGER :\r\n                max = Integer.MAX_VALUE;\r\n                min = Integer.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_BIGINT :\r\n                max = Long.MAX_VALUE;\r\n                min = Long.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_NUMERIC :\r\n            case Types.SQL_DECIMAL :\r\n                max = Long.MAX_VALUE;\r\n                min = Long.MIN_VALUE;\r\n                break;\r\n\r\n            default :\r\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
      },
      "id": "clone_3",
      "clone_type": "type-1",
      "clone": {
        "end_line": 538,
        "file": "/hsqldb/src/org/hsqldb/NumberSequence.java",
        "start_line": 511,
        "source_code": "case Types.TINYINT :\r\n                max = Byte.MAX_VALUE;\r\n                min = Byte.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_SMALLINT :\r\n                max = Short.MAX_VALUE;\r\n                min = Short.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_INTEGER :\r\n                max = Integer.MAX_VALUE;\r\n                min = Integer.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_BIGINT :\r\n                max = Long.MAX_VALUE;\r\n                min = Long.MIN_VALUE;\r\n                break;\r\n\r\n            case Types.SQL_NUMERIC :\r\n            case Types.SQL_DECIMAL :\r\n                max = Long.MAX_VALUE;\r\n                min = Long.MIN_VALUE;\r\n                break;\r\n\r\n            default :\r\n                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
      }
    },
    {
      "origin": {
        "end_line": 3560,
        "file": "/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
        "start_line": 3539,
        "source_code": "addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\r\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\r\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\r\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\r\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\r\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\r\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\r\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\r\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\r\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\r\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\r\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\r\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\r\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\r\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\r\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\r\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);\r\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);\r\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\r\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\r\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\r\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
      },
      "id": "clone_4",
      "clone_type": "type-1",
      "clone": {
        "end_line": 4287,
        "file": "/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
        "start_line": 4266,
        "source_code": "addColumn(t, \"CHARACTER_SET_SCHEMA\", SQL_IDENTIFIER);\r\n            addColumn(t, \"CHARACTER_SET_NAME\", SQL_IDENTIFIER);\r\n            addColumn(t, \"COLLATION_CATALOG\", SQL_IDENTIFIER);\r\n            addColumn(t, \"COLLATION_SCHEMA\", SQL_IDENTIFIER);\r\n            addColumn(t, \"COLLATION_NAME\", SQL_IDENTIFIER);\r\n            addColumn(t, \"NUMERIC_PRECISION\", CARDINAL_NUMBER);\r\n            addColumn(t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER);\r\n            addColumn(t, \"NUMERIC_SCALE\", CARDINAL_NUMBER);\r\n            addColumn(t, \"DATETIME_PRECISION\", CARDINAL_NUMBER);\r\n            addColumn(t, \"INTERVAL_TYPE\", CHARACTER_DATA);\r\n            addColumn(t, \"INTERVAL_PRECISION\", CARDINAL_NUMBER);\r\n            addColumn(t, \"UDT_CATALOG\", SQL_IDENTIFIER);\r\n            addColumn(t, \"UDT_SCHEMA\", SQL_IDENTIFIER);\r\n            addColumn(t, \"UDT_NAME\", SQL_IDENTIFIER);\r\n            addColumn(t, \"SCOPE_CATALOG\", SQL_IDENTIFIER);\r\n            addColumn(t, \"SCOPE_SCHEMA\", SQL_IDENTIFIER);\r\n            addColumn(t, \"SCOPE_NAME\", SQL_IDENTIFIER);\r\n            addColumn(t, \"MAXIMUM_CARDINALITY\", CARDINAL_NUMBER);\r\n            addColumn(t, \"DTD_IDENTIFIER\", SQL_IDENTIFIER);\r\n            addColumn(t, \"DECLARED_DATA_TYPE\", CHARACTER_DATA);\r\n            addColumn(t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER);\r\n            addColumn(t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER);"
      }
    },
    {
      "origin": {
        "end_line": 464,
        "file": "/hsqldb/src/org/hsqldb/test/TestSql.java",
        "start_line": 370,
        "source_code": "stmnt.execute(ddl1);\r\n\r\n            PreparedStatement ps = connection.prepareStatement(\r\n                \"INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)\");\r\n\r\n            ps.setString(1, \"0.2\");\r\n            ps.setDouble(2, 0.2);\r\n            ps.setLong(3, java.lang.Long.MAX_VALUE);\r\n            ps.setInt(4, Integer.MAX_VALUE);\r\n            ps.setInt(5, Short.MAX_VALUE);\r\n            ps.setInt(6, 0);\r\n            ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));\r\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));\r\n            ps.setTimestamp(\r\n                9, new java.sql.Timestamp(System.currentTimeMillis()));\r\n            ps.execute();\r\n            ps.setInt(1, 0);\r\n            ps.setDouble(2, java.lang.Double.NaN);\r\n            ps.setLong(3, java.lang.Long.MIN_VALUE);\r\n            ps.setInt(4, Integer.MIN_VALUE);\r\n            ps.setInt(5, Short.MIN_VALUE);\r\n            ps.setInt(6, 0);\r\n\r\n            // allowed conversions\r\n            ps.setTimestamp(\r\n                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));\r\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));\r\n            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));\r\n            ps.execute();\r\n\r\n            //\r\n            ps.setInt(1, 0);\r\n            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);\r\n            ps.setInt(4, Integer.MIN_VALUE);\r\n\r\n            // test conversion\r\n            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int\r\n            // ps.setBoolean(5, true);\r\n            ps.setObject(5, new Short((short) 2), Types.SMALLINT);\r\n            ps.setObject(6, new Integer(2), Types.TINYINT);\r\n\r\n            // allowed conversions\r\n            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));\r\n            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));\r\n            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()\r\n                                                   + 2));\r\n            ps.execute();\r\n            ps.setObject(1, new Float(0), Types.INTEGER);\r\n            ps.setObject(4, new Float(1), Types.INTEGER);\r\n            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);\r\n            ps.execute();\r\n\r\n            ResultSet rs =\r\n                stmnt.executeQuery(\"SELECT d, f, l, i, s*2, t FROM t1\");\r\n            boolean result = rs.next();\r\n\r\n            value = rs.getDouble(2);\r\n\r\n//            int smallintValue = rs.getShort(3);\r\n            int integerValue = rs.getInt(4);\r\n\r\n            if (rs.next()) {\r\n                value        = rs.getDouble(2);\r\n                wasEqual     = Double.isNaN(value);\r\n                integerValue = rs.getInt(4);\r\n\r\n                // tests for conversion\r\n                // getInt on DECIMAL\r\n                integerValue = rs.getInt(1);\r\n            }\r\n\r\n            if (rs.next()) {\r\n                value    = rs.getDouble(2);\r\n                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;\r\n            }\r\n\r\n            if (rs.next()) {\r\n                value    = rs.getDouble(2);\r\n                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;\r\n            }\r\n\r\n            rs = stmnt.executeQuery(\"SELECT MAX(i) FROM t1\");\r\n\r\n            if (rs.next()) {\r\n                int max = rs.getInt(1);\r\n\r\n                System.out.println(\"Max value for i: \" + max);\r\n            }\r\n\r\n            try {\r\n\r\n                // cause errors\r\n                ps.setString(5, \"three\");\r\n                fail(\"update did not fail\");\r\n            } catch (SQLException e) {}"
      },
      "id": "clone_5",
      "clone_type": "type-1",
      "clone": {
        "end_line": 539,
        "file": "/hsqldb/src/org/hsqldb/test/TestSqlPersistent.java",
        "start_line": 445,
        "source_code": "stmnt.execute(ddl1);\r\n\r\n            PreparedStatement ps = connection.prepareStatement(\r\n                \"INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)\");\r\n\r\n            ps.setString(1, \"0.2\");\r\n            ps.setDouble(2, 0.2);\r\n            ps.setLong(3, java.lang.Long.MAX_VALUE);\r\n            ps.setInt(4, Integer.MAX_VALUE);\r\n            ps.setInt(5, Short.MAX_VALUE);\r\n            ps.setInt(6, 0);\r\n            ps.setDate(7, new java.sql.Date(System.currentTimeMillis()));\r\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis()));\r\n            ps.setTimestamp(\r\n                9, new java.sql.Timestamp(System.currentTimeMillis()));\r\n            ps.execute();\r\n            ps.setInt(1, 0);\r\n            ps.setDouble(2, java.lang.Double.NaN);\r\n            ps.setLong(3, java.lang.Long.MIN_VALUE);\r\n            ps.setInt(4, Integer.MIN_VALUE);\r\n            ps.setInt(5, Short.MIN_VALUE);\r\n            ps.setInt(6, 0);\r\n\r\n            // allowed conversions\r\n            ps.setTimestamp(\r\n                7, new java.sql.Timestamp(System.currentTimeMillis() + 1));\r\n            ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1));\r\n            ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1));\r\n            ps.execute();\r\n\r\n            //\r\n            ps.setInt(1, 0);\r\n            ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY);\r\n            ps.setInt(4, Integer.MIN_VALUE);\r\n\r\n            // test conversion\r\n            // ps.setObject(5, Boolean.TRUE); // no longer converts boolean to int\r\n            // ps.setBoolean(5, true);\r\n            ps.setObject(5, new Short((short) 2), Types.SMALLINT);\r\n            ps.setObject(6, new Integer(2), Types.TINYINT);\r\n\r\n            // allowed conversions\r\n            ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2));\r\n            ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2));\r\n            ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis()\r\n                                                   + 2));\r\n            ps.execute();\r\n            ps.setObject(1, new Float(0), Types.INTEGER);\r\n            ps.setObject(4, new Float(1), Types.INTEGER);\r\n            ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY);\r\n            ps.execute();\r\n\r\n            ResultSet rs =\r\n                stmnt.executeQuery(\"SELECT d, f, l, i, s*2, t FROM t1\");\r\n            boolean result = rs.next();\r\n\r\n            value = rs.getDouble(2);\r\n\r\n//            int smallintValue = rs.getShort(3);\r\n            int integerValue = rs.getInt(4);\r\n\r\n            if (rs.next()) {\r\n                value        = rs.getDouble(2);\r\n                wasEqual     = Double.isNaN(value);\r\n                integerValue = rs.getInt(4);\r\n\r\n                // tests for conversion\r\n                // getInt on DECIMAL\r\n                integerValue = rs.getInt(1);\r\n            }\r\n\r\n            if (rs.next()) {\r\n                value    = rs.getDouble(2);\r\n                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;\r\n            }\r\n\r\n            if (rs.next()) {\r\n                value    = rs.getDouble(2);\r\n                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;\r\n            }\r\n\r\n            rs = stmnt.executeQuery(\"SELECT MAX(i) FROM t1\");\r\n\r\n            if (rs.next()) {\r\n                int max = rs.getInt(1);\r\n\r\n                System.out.println(\"Max value for i: \" + max);\r\n            }\r\n\r\n            try {\r\n\r\n                // cause errors\r\n                ps.setString(5, \"three\");\r\n                fail(\"update did not fail\");\r\n            } catch (SQLException e) {}"
      }
    },
    {
      "origin": {
        "end_line": 3206,
        "file": "/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
        "start_line": 3143,
        "source_code": "//\r\n        final int sequence_catalog           = 0;\r\n        final int sequence_schema            = 1;\r\n        final int sequence_name              = 2;\r\n        final int data_type                  = 3;\r\n        final int numeric_precision          = 4;\r\n        final int numeric_precision_radix    = 5;\r\n        final int numeric_scale              = 6;\r\n        final int maximum_value              = 7;\r\n        final int minimum_value              = 8;\r\n        final int increment                  = 9;\r\n        final int cycle_option               = 10;\r\n        final int declared_data_type         = 11;\r\n        final int declared_numeric_precision = 12;\r\n        final int declared_numeric_scale     = 13;\r\n        final int start_with                 = 14;\r\n        final int next_value                 = 15;\r\n\r\n        //\r\n        Iterator       it;\r\n        Object[]       row;\r\n        NumberSequence sequence;\r\n\r\n        it = database.schemaManager.databaseObjectIterator(\r\n            SchemaObject.SEQUENCE);\r\n\r\n        while (it.hasNext()) {\r\n            sequence = (NumberSequence) it.next();\r\n\r\n            if (!session.getGrantee().isAccessible(sequence)) {\r\n                continue;\r\n            }\r\n\r\n            row = t.getEmptyRowData();\r\n\r\n            NumberType type = (NumberType) sequence.getDataType();\r\n            int radix =\r\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\r\n                    .SQL_DECIMAL) ? 10\r\n                                  : 2;\r\n\r\n            row[sequence_catalog] = database.getCatalogName().name;\r\n            row[sequence_schema]  = sequence.getSchemaName().name;\r\n            row[sequence_name]    = sequence.getName().name;\r\n            row[data_type]        = sequence.getDataType().getFullNameString();\r\n            row[numeric_precision] =\r\n                ValuePool.getInt((int) type.getPrecision());\r\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\r\n            row[numeric_scale]              = ValuePool.INTEGER_0;\r\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\r\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\r\n            row[increment] = String.valueOf(sequence.getIncrement());\r\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\r\n                                                                 : \"NO\";\r\n            row[declared_data_type]         = row[data_type];\r\n            row[declared_numeric_precision] = row[numeric_precision];\r\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\r\n            row[start_with] = String.valueOf(sequence.getStartValue());\r\n            row[next_value]                 = String.valueOf(sequence.peek());\r\n\r\n            t.insertSys(session, store, row);\r\n        }\r\n\r\n        return t;"
      },
      "id": "clone_6",
      "clone_type": "type-1",
      "clone": {
        "end_line": 3311,
        "file": "/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
        "start_line": 3248,
        "source_code": "//\r\n        final int sequence_catalog           = 0;\r\n        final int sequence_schema            = 1;\r\n        final int sequence_name              = 2;\r\n        final int data_type                  = 3;\r\n        final int numeric_precision          = 4;\r\n        final int numeric_precision_radix    = 5;\r\n        final int numeric_scale              = 6;\r\n        final int maximum_value              = 7;\r\n        final int minimum_value              = 8;\r\n        final int increment                  = 9;\r\n        final int cycle_option               = 10;\r\n        final int declared_data_type         = 11;\r\n        final int declared_numeric_precision = 12;\r\n        final int declared_numeric_scale     = 13;\r\n        final int start_with                 = 14;\r\n        final int next_value                 = 15;\r\n\r\n        //\r\n        Iterator       it;\r\n        Object[]       row;\r\n        NumberSequence sequence;\r\n\r\n        it = database.schemaManager.databaseObjectIterator(\r\n            SchemaObject.SEQUENCE);\r\n\r\n        while (it.hasNext()) {\r\n            sequence = (NumberSequence) it.next();\r\n\r\n            if (!session.getGrantee().isAccessible(sequence)) {\r\n                continue;\r\n            }\r\n\r\n            row = t.getEmptyRowData();\r\n\r\n            NumberType type = (NumberType) sequence.getDataType();\r\n            int radix =\r\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\r\n                    .SQL_DECIMAL) ? 10\r\n                                  : 2;\r\n\r\n            row[sequence_catalog] = database.getCatalogName().name;\r\n            row[sequence_schema]  = sequence.getSchemaName().name;\r\n            row[sequence_name]    = sequence.getName().name;\r\n            row[data_type]        = sequence.getDataType().getFullNameString();\r\n            row[numeric_precision] =\r\n                ValuePool.getInt((int) type.getPrecision());\r\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\r\n            row[numeric_scale]              = ValuePool.INTEGER_0;\r\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\r\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\r\n            row[increment] = String.valueOf(sequence.getIncrement());\r\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\r\n                                                                 : \"NO\";\r\n            row[declared_data_type]         = row[data_type];\r\n            row[declared_numeric_precision] = row[numeric_precision];\r\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\r\n            row[start_with] = String.valueOf(sequence.getStartValue());\r\n            row[next_value]                 = String.valueOf(sequence.peek());\r\n\r\n            t.insertSys(session, store, row);\r\n        }\r\n\r\n        return t;"
      }
    },
    {
      "origin": {
        "end_line": 731,
        "file": "/hsqldb/src/org/hsqldb/test/TestLobs.java",
        "start_line": 682,
        "source_code": "ps.executeUpdate();\r\n\r\n            String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";\r\n            ResultSet rs = statement.executeQuery(dq1);\r\n\r\n            rs.next();\r\n\r\n            int length = rs.getInt(1);\r\n\r\n            assertTrue(value.length() == length);\r\n            rs.close();\r\n\r\n            String dq3 = \"delete from clobtest;\";\r\n\r\n            statement.execute(dq3);\r\n\r\n            char[] testChars = new char[11111];\r\n\r\n            for (int i = 0, j = 32; i < testChars.length; i++, j++) {\r\n                if (j > 255) {\r\n                    j = 32;\r\n                }\r\n\r\n                testChars[i] = (char) j;\r\n            }\r\n\r\n            ps.setCharacterStream(1, new CharArrayReader(testChars),\r\n                                  testChars.length);\r\n            ps.executeUpdate();\r\n\r\n            String dq2 = \"select clobfield from clobtest;\";\r\n\r\n            rs = statement.executeQuery(dq2);\r\n\r\n            rs.next();\r\n\r\n            Reader reader   = rs.getCharacterStream(1);\r\n            char[] newChars = new char[testChars.length];\r\n\r\n            try {\r\n                reader.read(newChars);\r\n            } catch (IOException e) {\r\n                fail(\"test failure\");\r\n            }\r\n\r\n            for (int i = 0; i < testChars.length; i++) {\r\n                if (testChars[i] != newChars[i]) {\r\n                    fail(\"test failure\");\r\n                }\r\n            }"
      },
      "id": "clone_7",
      "clone_type": "type-1",
      "clone": {
        "end_line": 808,
        "file": "/hsqldb/src/org/hsqldb/test/TestLobs.java",
        "start_line": 759,
        "source_code": "ps.executeUpdate();\r\n\r\n            String dq1   = \"select CHARACTER_LENGTH(clobfield) from clobtest;\";\r\n            ResultSet rs = statement.executeQuery(dq1);\r\n\r\n            rs.next();\r\n\r\n            int length = rs.getInt(1);\r\n\r\n            assertTrue(value.length() == length);\r\n            rs.close();\r\n\r\n            String dq3 = \"delete from clobtest;\";\r\n\r\n            statement.execute(dq3);\r\n\r\n            char[] testChars = new char[11111];\r\n\r\n            for (int i = 0, j = 32; i < testChars.length; i++, j++) {\r\n                if (j > 255) {\r\n                    j = 32;\r\n                }\r\n\r\n                testChars[i] = (char) j;\r\n            }\r\n\r\n            ps.setCharacterStream(1, new CharArrayReader(testChars),\r\n                                  testChars.length);\r\n            ps.executeUpdate();\r\n\r\n            String dq2 = \"select clobfield from clobtest;\";\r\n\r\n            rs = statement.executeQuery(dq2);\r\n\r\n            rs.next();\r\n\r\n            Reader reader   = rs.getCharacterStream(1);\r\n            char[] newChars = new char[testChars.length];\r\n\r\n            try {\r\n                reader.read(newChars);\r\n            } catch (IOException e) {\r\n                fail(\"test failure\");\r\n            }\r\n\r\n            for (int i = 0; i < testChars.length; i++) {\r\n                if (testChars[i] != newChars[i]) {\r\n                    fail(\"test failure\");\r\n                }\r\n            }"
      }
    },
    {
      "origin": {
        "end_line": 82,
        "file": "/hsqldb/src/org/hsqldb/test/TestNullInUnion.java",
        "start_line": 51,
        "source_code": "st.execute(\r\n            \"CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))\");\r\n        st.execute(\r\n            \"CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))\");\r\n        st.execute(\"INSERT INTO t1 values(1,1,1)\");\r\n        st.execute(\"INSERT INTO t1 values(2,2,2)\");\r\n        st.execute(\"INSERT INTO t2 values(1,3,3)\");\r\n\r\n        ResultSet rs = st.executeQuery(\r\n            \"select t as atable, a as idvalue, b as value1, c as value2, d as value3 from(\"\r\n            + \"(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union\"\r\n            + \"(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue\");\r\n\r\n        assertTrue(rs.next());\r\n        assertEquals(\"t1\", rs.getObject(\"atable\"));\r\n        assertEquals(1, rs.getInt(\"idvalue\"));\r\n        assertEquals(1, rs.getInt(\"value1\"));\r\n        assertEquals(1, rs.getInt(\"value2\"));\r\n        assertEquals(null, rs.getObject(\"value3\"));\r\n        assertTrue(rs.next());\r\n        assertEquals(\"t1\", rs.getObject(\"atable\"));\r\n        assertEquals(2, rs.getInt(\"idvalue\"));\r\n        assertEquals(2, rs.getInt(\"value1\"));\r\n        assertEquals(2, rs.getInt(\"value2\"));\r\n        assertEquals(null, rs.getObject(\"value3\"));\r\n        assertTrue(rs.next());\r\n        assertEquals(\"t2\", rs.getObject(\"atable\"));\r\n        assertEquals(1, rs.getInt(\"idvalue\"));\r\n        assertEquals(3, rs.getInt(\"value1\"));\r\n        assertEquals(null, rs.getObject(\"value2\"));\r\n        assertEquals(3, rs.getInt(\"value3\"));    //this fails!\r\n        assertFalse(rs.next());"
      },
      "id": "clone_8",
      "clone_type": "type-1",
      "clone": {
        "end_line": 727,
        "file": "/hsqldb/src/org/hsqldb/test/TestSql.java",
        "start_line": 696,
        "source_code": "st.execute(\r\n            \"CREATE TABLE t1 (id int not null, v1 int, v2 int, primary key(id))\");\r\n        st.execute(\r\n            \"CREATE TABLE t2 (id int not null, v1 int, v3 int, primary key(id))\");\r\n        st.execute(\"INSERT INTO t1 values(1,1,1)\");\r\n        st.execute(\"INSERT INTO t1 values(2,2,2)\");\r\n        st.execute(\"INSERT INTO t2 values(1,3,3)\");\r\n\r\n        ResultSet rs = st.executeQuery(\r\n            \"select t as atable, a as idvalue, b as value1, c as value2, d as value3 from(\"\r\n            + \"(select 't1' as t, t1.id as a, t1.v1 as b, t1.v2 as c, null as d from t1) union\"\r\n            + \"(select 't2' as t, t2.id as a, t2.v1 as b, null as c, t2.v3 as d from t2)) order by atable, idvalue\");\r\n\r\n        assertTrue(rs.next());\r\n        assertEquals(\"t1\", rs.getObject(\"atable\"));\r\n        assertEquals(1, rs.getInt(\"idvalue\"));\r\n        assertEquals(1, rs.getInt(\"value1\"));\r\n        assertEquals(1, rs.getInt(\"value2\"));\r\n        assertEquals(null, rs.getObject(\"value3\"));\r\n        assertTrue(rs.next());\r\n        assertEquals(\"t1\", rs.getObject(\"atable\"));\r\n        assertEquals(2, rs.getInt(\"idvalue\"));\r\n        assertEquals(2, rs.getInt(\"value1\"));\r\n        assertEquals(2, rs.getInt(\"value2\"));\r\n        assertEquals(null, rs.getObject(\"value3\"));\r\n        assertTrue(rs.next());\r\n        assertEquals(\"t2\", rs.getObject(\"atable\"));\r\n        assertEquals(1, rs.getInt(\"idvalue\"));\r\n        assertEquals(3, rs.getInt(\"value1\"));\r\n        assertEquals(null, rs.getObject(\"value2\"));\r\n        assertEquals(3, rs.getInt(\"value3\"));    //this fails!\r\n        assertFalse(rs.next());"
      }
    },
    {
      "origin": {
        "end_line": 286,
        "file": "/hsqldb/src/org/hsqldb/test/TestOdbcService.java",
        "start_line": 253,
        "source_code": "rs = ps.executeQuery();\r\n\r\n            assertTrue(\"No rows fetched\", rs.next());\r\n            assertEquals(\"str\", rs.getString(4));\r\n            assertEquals(5, rs.getInt(1));\r\n            assertEquals(3, rs.getInt(2));\r\n            assertEquals(\"five\", rs.getString(3));\r\n\r\n            assertTrue(\"No rows fetched\", rs.next());\r\n            assertEquals(\"str\", rs.getString(4));\r\n            assertEquals(10, rs.getInt(1));\r\n            assertEquals(3, rs.getInt(2));\r\n            assertEquals(\"ten\", rs.getString(3));\r\n\r\n            assertTrue(\"No rows fetched\", rs.next());\r\n            assertEquals(\"str\", rs.getString(4));\r\n            assertEquals(15, rs.getInt(1));\r\n            assertEquals(3, rs.getInt(2));\r\n            assertEquals(\"fifteen\", rs.getString(3));\r\n\r\n            assertTrue(\"Not enough rows fetched\", rs.next());\r\n            assertEquals(3, rs.getInt(2));\r\n            assertEquals(25, rs.getInt(1));\r\n            assertNull(rs.getString(3));\r\n            assertEquals(\"str\", rs.getString(4));\r\n\r\n            assertTrue(\"Not enough rows fetched\", rs.next());\r\n            assertEquals(3, rs.getInt(2));\r\n            assertEquals(40, rs.getInt(1));\r\n            assertEquals(\"forty\", rs.getString(3));\r\n            assertEquals(\"str\", rs.getString(4));\r\n\r\n            assertFalse(\"Too many rows fetched\", rs.next());\r\n            rs.close();"
      },
      "id": "clone_9",
      "clone_type": "type-1",
      "clone": {
        "end_line": 321,
        "file": "/hsqldb/src/org/hsqldb/test/TestOdbcService.java",
        "start_line": 288,
        "source_code": "rs = ps.executeQuery();\r\n\r\n            assertTrue(\"No rows fetched\", rs.next());\r\n            assertEquals(\"str\", rs.getString(4));\r\n            assertEquals(5, rs.getInt(1));\r\n            assertEquals(3, rs.getInt(2));\r\n            assertEquals(\"five\", rs.getString(3));\r\n\r\n            assertTrue(\"No rows fetched\", rs.next());\r\n            assertEquals(\"str\", rs.getString(4));\r\n            assertEquals(10, rs.getInt(1));\r\n            assertEquals(3, rs.getInt(2));\r\n            assertEquals(\"ten\", rs.getString(3));\r\n\r\n            assertTrue(\"No rows fetched\", rs.next());\r\n            assertEquals(\"str\", rs.getString(4));\r\n            assertEquals(15, rs.getInt(1));\r\n            assertEquals(3, rs.getInt(2));\r\n            assertEquals(\"fifteen\", rs.getString(3));\r\n\r\n            assertTrue(\"Not enough rows fetched\", rs.next());\r\n            assertEquals(3, rs.getInt(2));\r\n            assertEquals(25, rs.getInt(1));\r\n            assertNull(rs.getString(3));\r\n            assertEquals(\"str\", rs.getString(4));\r\n\r\n            assertTrue(\"Not enough rows fetched\", rs.next());\r\n            assertEquals(3, rs.getInt(2));\r\n            assertEquals(40, rs.getInt(1));\r\n            assertEquals(\"forty\", rs.getString(3));\r\n            assertEquals(\"str\", rs.getString(4));\r\n\r\n            assertFalse(\"Too many rows fetched\", rs.next());\r\n            rs.close();"
      }
    },
    {
      "origin": {
        "end_line": 2170,
        "file": "/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
        "start_line": 2147,
        "source_code": "row[icat]       = cat;\r\n                row[ischem]     = schem;\r\n                row[iname]      = pName;\r\n                row[icol_name]  = cName;\r\n                row[icol_type]  = cType;\r\n                row[idata_type] = dType;\r\n                row[itype_name] = tName;\r\n                row[iprec]      = prec;\r\n                row[ilength]    = len;\r\n                row[iscale]     = scale;\r\n                row[iradix]     = radix;\r\n                row[inullable]  = nullability;\r\n                row[iremark]    = remark;\r\n\r\n                // JDBC 4.0\r\n                row[icol_default]      = colDefault;\r\n                row[isql_data_type]    = sqlDataType;\r\n                row[isql_datetime_sub] = sqlDateTimeSub;\r\n                row[ichar_octet_len]   = charOctetLength;\r\n                row[iordinal_position] = ordinalPosition;\r\n                row[iis_nullable]      = isNullable;\r\n                row[ispecific_name]    = specificName;\r\n\r\n                t.insertSys(session, store, row);"
      },
      "id": "clone_10",
      "clone_type": "type-1",
      "clone": {
        "end_line": 2139,
        "file": "/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
        "start_line": 2115,
        "source_code": "row[icat]       = cat;\r\n                row[ischem]     = schem;\r\n                row[iname]      = pName;\r\n                row[icol_name]  = cName;\r\n                row[icol_type]  = cType;\r\n                row[idata_type] = dType;\r\n                row[itype_name] = tName;\r\n                row[iprec]      = prec;\r\n                row[ilength]    = len;\r\n                row[iscale]     = scale;\r\n                row[iradix]     = radix;\r\n                row[inullable]  = nullability;\r\n                row[iremark]    = remark;\r\n\r\n                // JDBC 4.0\r\n                row[icol_default]      = colDefault;\r\n                row[isql_data_type]    = sqlDataType;\r\n                row[isql_datetime_sub] = sqlDateTimeSub;\r\n                row[ichar_octet_len]   = charOctetLength;\r\n                row[iordinal_position] = ordinalPosition;\r\n                row[iis_nullable]      = isNullable;\r\n                row[ispecific_name]    = specificName;\r\n\r\n                t.insertSys(session, store, row);"
      }
    },
    {
      "origin": {
        "end_line": 3203,
        "file": "/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
        "start_line": 3170,
        "source_code": "sequence = (NumberSequence) it.next();\r\n\r\n            if (!session.getGrantee().isAccessible(sequence)) {\r\n                continue;\r\n            }\r\n\r\n            row = t.getEmptyRowData();\r\n\r\n            NumberType type = (NumberType) sequence.getDataType();\r\n            int radix =\r\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\r\n                    .SQL_DECIMAL) ? 10\r\n                                  : 2;\r\n\r\n            row[sequence_catalog] = database.getCatalogName().name;\r\n            row[sequence_schema]  = sequence.getSchemaName().name;\r\n            row[sequence_name]    = sequence.getName().name;\r\n            row[data_type]        = sequence.getDataType().getFullNameString();\r\n            row[numeric_precision] =\r\n                ValuePool.getInt((int) type.getPrecision());\r\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\r\n            row[numeric_scale]              = ValuePool.INTEGER_0;\r\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\r\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\r\n            row[increment] = String.valueOf(sequence.getIncrement());\r\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\r\n                                                                 : \"NO\";\r\n            row[declared_data_type]         = row[data_type];\r\n            row[declared_numeric_precision] = row[numeric_precision];\r\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\r\n            row[start_with] = String.valueOf(sequence.getStartValue());\r\n            row[next_value]                 = String.valueOf(sequence.peek());\r\n\r\n            t.insertSys(session, store, row);"
      },
      "id": "clone_11",
      "clone_type": "type-1",
      "clone": {
        "end_line": 3308,
        "file": "/hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
        "start_line": 3275,
        "source_code": "sequence = (NumberSequence) it.next();\r\n\r\n            if (!session.getGrantee().isAccessible(sequence)) {\r\n                continue;\r\n            }\r\n\r\n            row = t.getEmptyRowData();\r\n\r\n            NumberType type = (NumberType) sequence.getDataType();\r\n            int radix =\r\n                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types\r\n                    .SQL_DECIMAL) ? 10\r\n                                  : 2;\r\n\r\n            row[sequence_catalog] = database.getCatalogName().name;\r\n            row[sequence_schema]  = sequence.getSchemaName().name;\r\n            row[sequence_name]    = sequence.getName().name;\r\n            row[data_type]        = sequence.getDataType().getFullNameString();\r\n            row[numeric_precision] =\r\n                ValuePool.getInt((int) type.getPrecision());\r\n            row[numeric_precision_radix]    = ValuePool.getInt(radix);\r\n            row[numeric_scale]              = ValuePool.INTEGER_0;\r\n            row[maximum_value] = String.valueOf(sequence.getMaxValue());\r\n            row[minimum_value] = String.valueOf(sequence.getMinValue());\r\n            row[increment] = String.valueOf(sequence.getIncrement());\r\n            row[cycle_option]               = sequence.isCycle() ? \"YES\"\r\n                                                                 : \"NO\";\r\n            row[declared_data_type]         = row[data_type];\r\n            row[declared_numeric_precision] = row[numeric_precision];\r\n            row[declared_numeric_scale]     = row[declared_numeric_scale];\r\n            row[start_with] = String.valueOf(sequence.getStartValue());\r\n            row[next_value]                 = String.valueOf(sequence.peek());\r\n\r\n            t.insertSys(session, store, row);"
      }
    },
    {
      "origin": {
        "end_line": 914,
        "file": "/hsqldb/src/org/hsqldb/test/TestBench.java",
        "start_line": 887,
        "source_code": "pstmt1.setInt(1, delta);\r\n                pstmt1.setInt(2, aid);\r\n                pstmt1.executeUpdate();\r\n                pstmt1.clearWarnings();\r\n                pstmt2.setInt(1, aid);\r\n\r\n                ResultSet RS = pstmt2.executeQuery();\r\n\r\n                pstmt2.clearWarnings();\r\n\r\n                while (RS.next()) {\r\n                    aBalance = RS.getInt(1);\r\n                }\r\n\r\n                pstmt3.setInt(1, delta);\r\n                pstmt3.setInt(2, tid);\r\n                pstmt3.executeUpdate();\r\n                pstmt3.clearWarnings();\r\n                pstmt4.setInt(1, delta);\r\n                pstmt4.setInt(2, bid);\r\n                pstmt4.executeUpdate();\r\n                pstmt4.clearWarnings();\r\n                pstmt5.setInt(1, tid);\r\n                pstmt5.setInt(2, bid);\r\n                pstmt5.setInt(3, aid);\r\n                pstmt5.setInt(4, delta);\r\n                pstmt5.executeUpdate();\r\n                pstmt5.clearWarnings();"
      },
      "id": "clone_12",
      "clone_type": "type-1",
      "clone": {
        "end_line": 992,
        "file": "/hsqldb/src/org/hsqldb/test/JDBCBench.java",
        "start_line": 965,
        "source_code": "pstmt1.setInt(1, delta);\r\n                pstmt1.setInt(2, aid);\r\n                pstmt1.executeUpdate();\r\n                pstmt1.clearWarnings();\r\n                pstmt2.setInt(1, aid);\r\n\r\n                ResultSet RS = pstmt2.executeQuery();\r\n\r\n                pstmt2.clearWarnings();\r\n\r\n                while (RS.next()) {\r\n                    aBalance = RS.getInt(1);\r\n                }\r\n\r\n                pstmt3.setInt(1, delta);\r\n                pstmt3.setInt(2, tid);\r\n                pstmt3.executeUpdate();\r\n                pstmt3.clearWarnings();\r\n                pstmt4.setInt(1, delta);\r\n                pstmt4.setInt(2, bid);\r\n                pstmt4.executeUpdate();\r\n                pstmt4.clearWarnings();\r\n                pstmt5.setInt(1, tid);\r\n                pstmt5.setInt(2, bid);\r\n                pstmt5.setInt(3, aid);\r\n                pstmt5.setInt(4, delta);\r\n                pstmt5.executeUpdate();\r\n                pstmt5.clearWarnings();"
      }
    }
  ],
  "biggest_class_lines": 45,
  "volume": 169960,
  "clone_class_num": 10,
  "total_clone_size": 764
}